name: 🚀 Deploy Produção - Sistema NAPJe com IA

# Permissões explícitas para o token do workflow
permissions:
  contents: write
  actions: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main, master ]
  # Removendo pull_request para evitar deploys em PRs de forks
  # pull_request:
  #   branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      enable_ai_features:
        description: 'Habilitar funcionalidades de IA'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  # Job 0: Verificações de Segurança
  security-checks:
    name: 🔒 Verificações de Segurança
    runs-on: ubuntu-latest
    outputs:
      is-safe-context: ${{ steps.check-context.outputs.is-safe }}
      
    steps:
      - name: 🔍 Verificar contexto de execução
        id: check-context
        run: |
          echo "🔍 Verificando contexto de segurança..."
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          
          # Verificar se é um contexto seguro
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") ]]; then
            echo "✅ Contexto seguro - push para branch principal"
            echo "is-safe=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✅ Contexto seguro - execução manual"
            echo "is-safe=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Contexto não seguro - pulando deploy sensível"
            echo "is-safe=false" >> $GITHUB_OUTPUT
          fi

  # Job 1: Verificações e Testes
  quality-checks:
    name: 🔍 Verificações de Qualidade
    runs-on: ubuntu-latest
    needs: security-checks
    if: needs.security-checks.outputs.is-safe-context == 'true'
    outputs:
      should-deploy: ${{ steps.check-changes.outputs.should-deploy }}
      
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Instalar dependências
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🧹 Lint
        run: |
          echo "🔍 Executando ESLint para produção..."
                     npm run lint
          
      - name: 🔎 Type Check
        run: |
          echo "📝 Verificando TypeScript..."
          npm run type-check
          
      - name: 🔄 Verificar mudanças relevantes
        id: check-changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E "\.(ts|tsx|js|jsx|json|md)$" > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Mudanças relevantes detectadas"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Nenhuma mudança relevante detectada"
          fi

  # Job 2: Build e Deploy das Edge Functions
  deploy-edge-functions:
    name: 🤖 Deploy Edge Functions IA
    runs-on: ubuntu-latest
    needs: [security-checks, quality-checks]
    if: needs.security-checks.outputs.is-safe-context == 'true' && needs.quality-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: 🚀 Deploy Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "🤖 Deployando Edge Functions de IA..."
          
          # Login no Supabase
          supabase login --token $SUPABASE_ACCESS_TOKEN
          
          # Link do projeto
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Deploy das functions se existirem
          if [ -d "supabase/functions" ]; then
            echo "📁 Encontradas Edge Functions, deployando..."
            supabase functions deploy --no-verify-jwt
            echo "✅ Edge Functions deployadas com sucesso!"
          else
            echo "ℹ️ Nenhuma Edge Function encontrada para deploy"
          fi

  # Job 3: Build da Aplicação
  build:
    name: 🏗️ Build Aplicação
    runs-on: ubuntu-latest
    needs: [security-checks, quality-checks]
    if: needs.security-checks.outputs.is-safe-context == 'true' && needs.quality-checks.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        environment: [production]
        
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Instalar dependências
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🌐 Configurar variáveis de ambiente
        run: |
          echo "🔧 Configurando ambiente de ${{ matrix.environment }}..."
          
          # Criar arquivo .env.production
          cat > .env.production << EOF
          NODE_ENV=production
          VITE_APP_ENV=${{ matrix.environment }}
          
          # Supabase Configuration
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
          # AI Features
          VITE_AI_FEATURES_ENABLED=${{ github.event.inputs.enable_ai_features || 'true' }}
          VITE_SMART_SEARCH_ENABLED=true
          VITE_AI_INSIGHTS_ENABLED=true
          VITE_SMART_NOTIFICATIONS_ENABLED=true
          VITE_SMART_FORMS_ENABLED=true
          
          # Performance & Analytics
          VITE_ENABLE_ANALYTICS=true
          VITE_ENABLE_PERFORMANCE_MONITORING=true
          
          # Build Info
          VITE_APP_TITLE=NAPJe - Painel de Atalhos Inteligente
          VITE_APP_VERSION=$(date +%Y%m%d%H%M%S)
          VITE_BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)
          VITE_COMMIT_HASH=${{ github.sha }}
          VITE_COMMIT_SHORT=${GITHUB_SHA::7}
          VITE_BRANCH_NAME=${GITHUB_REF#refs/heads/}
          EOF
          
          echo "✅ Variáveis de ambiente configuradas"
          
      - name: 🏗️ Build para produção
        run: |
          echo "🔨 Iniciando build otimizado..."
          
          # Usar configuração otimizada para produção
          npm run build:prod
          
          echo "✅ Build concluído com sucesso!"

      - name: ♻️ Preparar SPA 404 para GitHub Pages
        run: cp dist/index.html dist/404.html
          
      - name: 📊 Análise do Build
        run: |
          echo "📊 Analisando build gerado..."
          
          # Estatísticas do build
          BUILD_SIZE=$(du -sh dist | cut -f1)
          FILE_COUNT=$(find dist -type f | wc -l)
          
          echo "📁 Tamanho do build: $BUILD_SIZE"
          echo "📄 Número de arquivos: $FILE_COUNT"
          
          # Verificar arquivos grandes
          echo "🔍 Verificando arquivos grandes (>1MB):"
          find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.json" \) -exec gzip -9 -k {} \;
          
          # Criar arquivo de informações do build
          cat > dist/build-info.json << EOF
          {
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "commitHash": "${{ github.sha }}",
            "commitShort": "${GITHUB_SHA::7}",
            "branch": "${GITHUB_REF#refs/heads/}",
            "workflow": "${{ github.workflow }}",
            "runNumber": "${{ github.run_number }}",
            "actor": "${{ github.actor }}",
            "buildSize": "$BUILD_SIZE",
            "fileCount": $FILE_COUNT,
            "environment": "${{ matrix.environment }}",
            "aiFeatures": {
              "enabled": ${{ github.event.inputs.enable_ai_features || 'true' }},
              "smartSearch": true,
              "aiInsights": true,
              "smartNotifications": true,
              "smartForms": true
            }
          }
          EOF
          
      - name: 🗜️ Otimizações pós-build
        run: |
          echo "⚡ Aplicando otimizações..."
          
          # Comprimir arquivos estáticos
          find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.json" \) -exec gzip -9 -k {} \;
          
          # Criar arquivo .nojekyll para GitHub Pages
          touch dist/.nojekyll
          
          # Verificações finais
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html não encontrado!"
            exit 1
          fi
          
          echo "✅ Otimizações aplicadas"
          
      - name: 📤 Upload artifacts do build
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}-${{ github.sha }}
          path: dist/
          retention-days: 30

  # Job 4: Deploy para GitHub Pages
  deploy-github-pages:
    name: 🌐 Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: [security-checks, quality-checks, build]
    if: needs.security-checks.outputs.is-safe-context == 'true' && needs.quality-checks.outputs.should-deploy == 'true' && github.ref == 'refs/heads/main'
    
    # Permissões já definidas globalmente, mas mantendo para clareza
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production-${{ github.sha }}
          path: dist/
          
      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4
        
      - name: 📤 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
          
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 5: Notificações e Cleanup
  post-deploy:
    name: 📬 Pós-deploy
    runs-on: ubuntu-latest
    needs: [deploy-github-pages, deploy-edge-functions]
    if: always()
    
    steps:
      - name: 🎉 Notificação de sucesso
        if: needs.deploy-github-pages.result == 'success'
        run: |
          echo "🎉 Deploy realizado com sucesso!"
          echo "🔗 URL: https://msribeiro2010.github.io/napje-painel-atalhos/"
          echo "🤖 IA Features: Habilitadas"
          echo "📅 Data: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"
          
      - name: ❌ Notificação de falha
        if: needs.deploy-github-pages.result == 'failure' || needs.deploy-edge-functions.result == 'failure'
        run: |
          echo "❌ Deploy falhou!"
          echo "🔍 Verifique os logs para mais detalhes"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"

  # Job 6: Limpeza de artifacts antigos
  cleanup:
    name: 🧹 Limpeza
    runs-on: ubuntu-latest
    needs: post-deploy
    if: always()
    
    steps:
      - name: 🗑️ Limpar artifacts antigos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('build-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5); // Manter apenas os 5 mais recentes
              
            for (const artifact of oldArtifacts) {
              console.log(`🗑️ Removendo artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
            
            console.log(`✅ ${oldArtifacts.length} artifacts antigos removidos`);

# Configurações de concorrência
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true