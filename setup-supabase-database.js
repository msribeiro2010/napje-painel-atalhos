#!/usr/bin/env node

/**
 * Script para configurar automaticamente a base de dados do Supabase
 * Execute ap√≥s configurar as credenciais no .env
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Erro: Credenciais do Supabase n√£o encontradas no .env');
  console.log('\nüìã Certifique-se de que as seguintes vari√°veis est√£o configuradas:');
  console.log('- VITE_SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY');
  console.log('\nüìñ Consulte o arquivo GUIA_CONFIGURACAO_SUPABASE.md para instru√ß√µes detalhadas.');
  process.exit(1);
}

// Criar cliente Supabase com chave de servi√ßo (admin)
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupDatabase() {
  console.log('üöÄ Iniciando configura√ß√£o da base de dados do Supabase...');
  console.log(`üì° Conectando a: ${supabaseUrl}`);

  try {
    // 1. Criar tabela user_custom_events
    console.log('\nüìã Criando tabela user_custom_events...');
    
    const createTableSQL = `
      -- Criar tabela user_custom_events
      CREATE TABLE IF NOT EXISTS user_custom_events (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
          title TEXT NOT NULL,
          description TEXT,
          event_date DATE NOT NULL,
          event_time TIME,
          category TEXT DEFAULT 'personal',
          priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
          is_recurring BOOLEAN DEFAULT false,
          recurrence_pattern TEXT,
          notification_enabled BOOLEAN DEFAULT true,
          notification_time INTEGER DEFAULT 60,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );

      -- Criar √≠ndices para melhor performance
      CREATE INDEX IF NOT EXISTS idx_user_custom_events_user_id ON user_custom_events(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_custom_events_date ON user_custom_events(event_date);
      CREATE INDEX IF NOT EXISTS idx_user_custom_events_category ON user_custom_events(category);

      -- Trigger para atualizar updated_at automaticamente
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = NOW();
          RETURN NEW;
      END;
      $$ language 'plpgsql';

      CREATE TRIGGER update_user_custom_events_updated_at
          BEFORE UPDATE ON user_custom_events
          FOR EACH ROW
          EXECUTE FUNCTION update_updated_at_column();
    `;

    const { error: tableError } = await supabase.rpc('exec_sql', { sql: createTableSQL });
    
    if (tableError) {
      // Tentar m√©todo alternativo se rpc n√£o funcionar
      console.log('‚ö†Ô∏è  M√©todo RPC n√£o dispon√≠vel, tentando m√©todo alternativo...');
      
      // Executar comandos individuais
      const commands = [
        `CREATE TABLE IF NOT EXISTS user_custom_events (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
          title TEXT NOT NULL,
          description TEXT,
          event_date DATE NOT NULL,
          event_time TIME,
          category TEXT DEFAULT 'personal',
          priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
          is_recurring BOOLEAN DEFAULT false,
          recurrence_pattern TEXT,
          notification_enabled BOOLEAN DEFAULT true,
          notification_time INTEGER DEFAULT 60,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )`
      ];
      
      for (const command of commands) {
        const { error } = await supabase.from('user_custom_events').select('id').limit(1);
        if (error && error.code === 'PGRST116') {
          console.log('‚ùå Tabela n√£o existe. Execute manualmente o SQL no painel do Supabase.');
          console.log('\nüìñ Consulte o arquivo GUIA_CONFIGURACAO_SUPABASE.md para o SQL completo.');
          break;
        }
      }
    } else {
      console.log('‚úÖ Tabela user_custom_events criada com sucesso!');
    }

    // 2. Configurar pol√≠ticas RLS
    console.log('\nüîí Configurando pol√≠ticas RLS (Row Level Security)...');
    
    const rlsSQL = `
      -- Habilitar RLS na tabela
      ALTER TABLE user_custom_events ENABLE ROW LEVEL SECURITY;

      -- Remover pol√≠ticas existentes se houver
      DROP POLICY IF EXISTS "Users can view own events" ON user_custom_events;
      DROP POLICY IF EXISTS "Users can insert own events" ON user_custom_events;
      DROP POLICY IF EXISTS "Users can update own events" ON user_custom_events;
      DROP POLICY IF EXISTS "Users can delete own events" ON user_custom_events;

      -- Pol√≠tica para SELECT
      CREATE POLICY "Users can view own events" ON user_custom_events
          FOR SELECT USING (auth.uid() = user_id);

      -- Pol√≠tica para INSERT
      CREATE POLICY "Users can insert own events" ON user_custom_events
          FOR INSERT WITH CHECK (auth.uid() = user_id);

      -- Pol√≠tica para UPDATE
      CREATE POLICY "Users can update own events" ON user_custom_events
          FOR UPDATE USING (auth.uid() = user_id);

      -- Pol√≠tica para DELETE
      CREATE POLICY "Users can delete own events" ON user_custom_events
          FOR DELETE USING (auth.uid() = user_id);
    `;

    const { error: rlsError } = await supabase.rpc('exec_sql', { sql: rlsSQL });
    
    if (rlsError) {
      console.log('‚ö†Ô∏è  Configure as pol√≠ticas RLS manualmente no painel do Supabase.');
      console.log('üìñ Consulte o arquivo GUIA_CONFIGURACAO_SUPABASE.md para o SQL das pol√≠ticas.');
    } else {
      console.log('‚úÖ Pol√≠ticas RLS configuradas com sucesso!');
    }

    // 3. Testar a tabela
    console.log('\nüß™ Testando acesso √† tabela...');
    
    const { data, error: testError } = await supabase
      .from('user_custom_events')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.log('‚ùå Erro ao acessar a tabela:', testError.message);
      console.log('\nüí° Poss√≠veis solu√ß√µes:');
      console.log('1. Execute o SQL manualmente no painel do Supabase');
      console.log('2. Verifique se as credenciais est√£o corretas');
      console.log('3. Certifique-se de que a chave service_role est√° sendo usada');
    } else {
      console.log('‚úÖ Tabela acess√≠vel com sucesso!');
    }

    console.log('\nüéâ Configura√ß√£o da base de dados conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Reinicie o servidor de desenvolvimento: npm run dev');
    console.log('2. Teste a funcionalidade de eventos customizados');
    console.log('3. Verifique se a autentica√ß√£o est√° funcionando');
    
  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
    console.log('\nüí° Solu√ß√µes:');
    console.log('1. Verifique se as credenciais do Supabase est√£o corretas');
    console.log('2. Certifique-se de que o projeto Supabase est√° ativo');
    console.log('3. Execute o SQL manualmente no painel do Supabase');
    console.log('\nüìñ Consulte o arquivo GUIA_CONFIGURACAO_SUPABASE.md para instru√ß√µes detalhadas.');
    process.exit(1);
  }
}

// Executar configura√ß√£o
setupDatabase();